import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { format } from 'date-fns';
import { StoredCalculation } from './storage';

export async function generatePDFReport(
  calculations: StoredCalculation[],
  timeRange: string
): Promise<void> {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Header
  pdf.setFontSize(20);
  pdf.setTextColor(16, 185, 129);
  pdf.text('Carbon Footprint Report', 20, 30);
  
  pdf.setFontSize(12);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Generated on ${format(new Date(), 'MMMM dd, yyyy')}`, 20, 40);
  pdf.text(`Time Period: ${timeRange}`, 20, 50);
  
  // Summary Statistics
  const totalCalculations = calculations.length;
  const averageFootprint = calculations.reduce((sum, calc) => sum + calc.footprint, 0) / totalCalculations;
  const lowestFootprint = Math.min(...calculations.map(calc => calc.footprint));
  const highestFootprint = Math.max(...calculations.map(calc => calc.footprint));
  
  pdf.setFontSize(14);
  pdf.setTextColor(0, 0, 0);
  pdf.text('Summary Statistics', 20, 70);
  
  pdf.setFontSize(11);
  pdf.text(`Total Calculations: ${totalCalculations}`, 20, 85);
  pdf.text(`Average Footprint: ${Math.round(averageFootprint).toLocaleString()} kg CO₂`, 20, 95);
  pdf.text(`Lowest Footprint: ${Math.round(lowestFootprint).toLocaleString()} kg CO₂`, 20, 105);
  pdf.text(`Highest Footprint: ${Math.round(highestFootprint).toLocaleString()} kg CO₂`, 20, 115);
  
  // Trend Analysis
  if (calculations.length > 1) {
    const trend = calculations[0].footprint - calculations[calculations.length - 1].footprint;
    const trendText = trend < 0 ? 'Increasing' : 'Decreasing';
    const trendColor = trend < 0 ? [220, 38, 38] : [34, 197, 94];
    
    pdf.setTextColor(...trendColor);
    pdf.text(`Trend: ${trendText} (${Math.abs(Math.round(trend)).toLocaleString()} kg CO₂)`, 20, 125);
  }
  
  // Detailed History Table
  pdf.setTextColor(0, 0, 0);
  pdf.setFontSize(14);
  pdf.text('Detailed History', 20, 150);
  
  // Table headers
  pdf.setFontSize(10);
  pdf.text('Date', 20, 165);
  pdf.text('Total (kg CO₂)', 60, 165);
  pdf.text('Transport', 110, 165);
  pdf.text('Energy', 140, 165);
  pdf.text('Lifestyle', 170, 165);
  
  // Table data
  let yPosition = 175;
  calculations.slice(0, 20).forEach((calc, index) => { // Limit to first 20 entries
    if (yPosition > pageHeight - 30) {
      pdf.addPage();
      yPosition = 30;
    }
    
    pdf.text(format(calc.timestamp, 'MM/dd/yyyy'), 20, yPosition);
    pdf.text(Math.round(calc.footprint).toLocaleString(), 60, yPosition);
    pdf.text(Math.round(calc.footprint * 0.35).toLocaleString(), 110, yPosition);
    pdf.text(Math.round(calc.footprint * 0.28).toLocaleString(), 140, yPosition);
    pdf.text(Math.round(calc.footprint * 0.37).toLocaleString(), 170, yPosition);
    
    yPosition += 10;
  });
  
  // Recommendations
  if (yPosition > pageHeight - 80) {
    pdf.addPage();
    yPosition = 30;
  }
  
  pdf.setFontSize(14);
  pdf.text('Recommendations', 20, yPosition + 20);
  
  pdf.setFontSize(11);
  const recommendations = generateRecommendations(averageFootprint, calculations);
  recommendations.forEach((rec, index) => {
    pdf.text(`• ${rec}`, 20, yPosition + 35 + (index * 10));
  });
  
  // Footer
  pdf.setFontSize(8);
  pdf.setTextColor(100, 100, 100);
  pdf.text('Generated by CarbonTracker - Your Personal Climate Action Platform', 20, pageHeight - 10);
  
  // Save the PDF
  pdf.save(`carbon-footprint-report-${timeRange}-${format(new Date(), 'yyyy-MM-dd')}.pdf`);
}

function generateRecommendations(averageFootprint: number, calculations: StoredCalculation[]): string[] {
  const recommendations: string[] = [];
  
  if (averageFootprint > 10000) {
    recommendations.push('Your footprint is above average. Focus on transportation and energy efficiency.');
  } else if (averageFootprint > 7500) {
    recommendations.push('You\'re close to the global average. Small changes can make a big difference.');
  } else {
    recommendations.push('Great job! Your footprint is below average. Consider carbon offsets to go negative.');
  }
  
  // Transportation recommendations
  const avgTransport = averageFootprint * 0.35;
  if (avgTransport > 3500) {
    recommendations.push('Consider electric vehicles, public transport, or carpooling to reduce transport emissions.');
  }
  
  // Energy recommendations
  const avgEnergy = averageFootprint * 0.28;
  if (avgEnergy > 2800) {
    recommendations.push('Improve home energy efficiency with LED lights, better insulation, and smart thermostats.');
  }
  
  // Trend-based recommendations
  if (calculations.length > 1) {
    const trend = calculations[0].footprint - calculations[calculations.length - 1].footprint;
    if (trend < -500) {
      recommendations.push('Your emissions are increasing. Review recent lifestyle changes and adjust accordingly.');
    } else if (trend > 500) {
      recommendations.push('Excellent progress! Maintain your current habits and consider sharing your success.');
    }
  }
  
  recommendations.push('Track your progress regularly and set monthly reduction targets.');
  recommendations.push('Consider purchasing verified carbon offsets for remaining emissions.');
  
  return recommendations;
}